;;; 3_base.jsl
;;; Based on 2_compiler.jsl's capabilities.

;; N.B. We get the full power of the previous compiler's macro
;; facilities when defining the base!

(js:code "
  globals['globals'] = globals;

  globals['js:hasOwnProperty'] = function (o, k) {
    return Object.prototype.hasOwnProperty.call(o, k);
  };

  (function () {
    // in anonymous function so 'this' points to global context

    function Cons(a, b) {
      this.head = a;
      this.tail = b;
    }
    function Nil() { }

    function Symbol(s, gensym) {
      this.s = s;
      this.gensym = gensym || false;
    }
    Symbol.prototype.toString = function toString() {
      return this.s;
    };
    Symbol.symbols = {};
    Symbol.nextGensym = 1;
    Symbol.create = function create(s, gensym) {
      // TODO figure out how to compile interned symbols.
      if (!gensym) {
        if (globals['js:hasOwnProperty'](this.symbols, s)) {
          return this.symbols[s];
        } else {
          this.nextGensym++;
          return this.symbols[s] = new Symbol(s);
        }
      } else {
        var id = this.nextGensym++;
        return new Symbol('#' + s + '_' + id, true);
      }
    };

    if (this.Cons === undefined) {
      this.Cons = Cons;
      this.Nil = Nil;
    }

    if (this.Symbol === undefined) {
      this.Symbol = Symbol;
    }
  })();
")


;;; Macros

(defun (set-macro-type! f type)
  (js:binop "=" (js:prop f "macro") @true)
  (js:binop "=" (js:prop f "macro-type") type)
  f)
(defun (macro? f)
  (and (function? f) (= @true (js:prop f "macro"))))
(defun (macro-type x)
  (js:prop x "macro-type"))
(defun (form-macro? x)
  (and (macro? x) (= "form" (macro-type x))))
(defun (symbol-macro? x)
  (and (macro? x) (= "symbol" (macro-type x))))

(def add-macro!
     (fun (name f)
       (set-macro-type! f "form")
       (js:binop "=" (js:prop (js:js "globals") name) f)))
(def add-symbol-macro!
     (fun (name f)
       (set-macro-type! f "symbol")
       (js:binop "=" (js:prop (js:js "globals") name) f)))

(add-macro! 'defmac
  (fun (s env)
    (let (v (head (tail s))
          body (tail (tail s)))
      (when (not (cons? v))
        (error (++ "Invalid defmac arglist: " (repr v))))
      (let (s (gensym 'expr))
        `(def ,(head v)
           (set-macro-type!
            (fun (,s ,(gensym 'env))
           (apply (named-fun ,(head v) ,(tail v) ,#body)
             (tail ,s)))
         "form"))))))

(defmac (do # body)
  `(js:seq ,body))

(defmac (def # pairs)
  (cons 'do (a:map (fun (s v)
                        (if (symbol? s)
                            `(js:def ,s ,v)
                            (error (++ "Cannot 'def' a non-symbol: " (repr s)))))
                   pairs)))

(defmac (setq! # pairs)
  (cons 'do (a:map (fun (s v)
                        (if (symbol? s)
                            `(js:binop "=" ,s ,v)
                            (error (++ "Cannot 'def' a non-symbol: " (repr s)))))
                   pairs)))


(defmac (set! # pairs)
  `(do ,#(a:map (fun (place val) `(single-set! ,place ,val)) pairs)))

(add-macro! 'single-set!
  (fun (s env)
    (let (place (nth s 1)
          val (nth s 2))
      (if (symbol? place)
            (if (and (env 'has? place) (symbol-macro? (env 'lookup place)))
                `(single-set! ,(macro-expand place env) ,val)
                `(setq! ,place ,val))
          (and (cons? place) (symbol? (head place)))
            `(,(symbol "set-" (head place) "!") ,#(tail place) ,val)))))

(defmac (defun v # body)
  (when (not (cons? v))
    (error (++ "Invalid defun arglist: " (repr v))))
  `(def ,(head v) (named-fun ,(head v) ,(tail v) (do ,#body))))


;;; Functions

(defmac (named-fun name al # body)
  (defun (fun-check-num-args min-expected has-varargs)
    (++ (if (< 0 min-expected)
            (++ "if (arguments.length < " min-expected ") {\n"
                "  throw new Error(\"Expecting at least " min-expected " arguments.\");\n"
                "}\n")
            "")
        (if has-varargs
            ""
            (++ "if (arguments.length > " min-expected ") {\n"
                "  throw new Error(\"Expecting at most " min-expected " arguments.\");\n"
                "}\n"))))
  (defun (fun-handle-vararg offset)
    (++ "(function (args) {\n"
        "  var vargs = new Nil();\n"
        "  for (var i = args.length - 1; i >= " offset "; i--) {\n"
        "    vargs = new Cons(args[i], vargs);\n"
        "  }\n"
        "  return vargs;\n"
        "})(arguments)"))

  (let (args (init-improper al)
        varg (last-improper al))
    (let (argcode `(js:code ,(fun-check-num-args (length args) (not (nil? varg))))
          varargcode `(js:js ,(fun-handle-vararg (length args))))
      `(js:function ,name ,args
         (js:seq (,argcode ,#(if (nil? varg)
                               []
                               [`(js:def ,varg ,varargcode)])
                  ,#body))))))

(defmac (fun al # body)
  `(named-fun @null ,al ,#body))


;;; Basic functions and datatypes

(defun (error msg)
  ((js:js "function (msg) { throw new Error(msg); }") msg))

(def apply (js:js "(function (f, args) {
  var c = Cons;
  var as = [];
  while (args instanceof c) {
    as.push(args.head);
    args = args.tail;
  }
  return f.apply(undefined, as);
})"))

(defun (list # args)
  args)

(defun (cons a b)
  ((js:js "function (a, b) { return new Cons(a, b); }") a b))
(def nil (js:js "new Nil()"))

(defun (cons? x)
  (js:binop "instanceof" x (js:js "Cons")))
(defun (nil? x)
  (js:binop "instanceof" x (js:js "Nil")))

(defun (null? x)
  (js:binop "===" x (js:js "null")))
(defun (string? x)
  (js:binop "===" (js:unop "typeof" x) "string"))
(defun (boolean? x)
  (js:binop "===" (js:unop "typeof" x) "boolean"))
(defun (number? x)
  (js:binop "===" (js:unop "typeof" x) "number"))
(defun (function? x)
  (js:binop "===" (js:unop "typeof" x) "function"))
(defun (undefined? x)
  (js:binop "===" x (js:js "void 0")))
(defun (from-undefined x default)
  (js:if (undefined? x) default x))

(defun (head lst)
  (if (cons? lst)
    (js:prop lst "head")
    (error "Cannot take head")))
(defun (tail lst)
  (if (cons? lst)
    (js:prop lst "tail")
    (error "Cannot take tail")))
(defun (set-head! lst v)
  (if (cons? lst)
    (js:binop "=" (js:prop lst "head") v)
    (error "Cannot set head")))
(defun (set-tail! lst v)
  (if (cons? lst)
    (js:binop "=" (js:prop lst "tail") v)
    (error "Cannot set tail")))
(def first head)
(defun (second lst)
  (head (tail lst)))
(defun (third lst)
  (head (tail (tail lst))))

(defun (not x)
  (js:unop "!" x))

(defmac (if # conds)
  (if (nil? conds)        @null
      (nil? (tail conds)) (head conds) ; 'default' case
      otherwise           `(js:if ,(head conds)
                             ,(head (tail conds))
                             (if ,#(tail (tail conds))))))
(add-symbol-macro! 'otherwise (fun (s env) @true))

(defmac (when pred # body)
  `(if ,pred (do ,#body)))
(defmac (unless pred # body)
  `(if (not ,pred) (do ,#body)))

(defmac (while pred # body)
  `(js:while ,pred (do ,#body)))


;;; Operations on lists

(defun (foldl op start lst)
  (while (not (nil? lst))
    (setq! start (op start (head lst)))
    (setq! lst (tail lst)))
  start)

(defun (foldr op end lst)
  (defun (_foldr lst)
    (if (nil? lst)
      end
      (op (head lst) (_foldr (tail lst)))))
  (_foldr lst))

(defun (map op lst)
  (if (nil? lst)
    '()
    (cons (op (head lst)) (map op (tail lst)))))

(defun (each op lst)
  (while (not (nil? lst))
    (op (head lst))
    (setq! lst (tail lst))))

(defun (reversed lst)
  (foldl (fun (a b) (cons b a)) '() lst))

(defun (filter pred lst)
  (if (nil? lst)        '()
      (pred (head lst)) (cons (head lst) (filter pred (tail lst)))
      otherwise         (filter pred (tail lst))))

; Association lists

(defun (a:map f alist)
  (if (nil? alist)        '()
      (nil? (tail alist)) (error "Improper alist")
      otherwise           (cons (f (head alist) (head (tail alist)))
                                (a:map f (tail (tail alist))))))

(defun (a:keys alist)
  (a:map (fun (key value) key) alist))
(defun (a:values alist)
  (a:map (fun (key value) value) alist))

; Operators
(defun (js:+ a b)   (js:binop "+" a b))
(defun (js:- a b)   (js:binop "-" a b))
(defun (js:* a b)   (js:binop "*" a b))
(defun (js:/ a b)   (js:binop "/" a b))
(defun (js:% a b)   (js:binop "%" a b))
(defun (js:< a b)   (js:binop "<" a b))
(defun (js:> a b)   (js:binop ">" a b))
(defun (js:<= a b)  (js:binop "<=" a b))
(defun (js:>= a b)  (js:binop ">=" a b))
(defun (js:=== a b) (js:binop "===" a b))
(defun (js:!== a b) (js:binop "!==" a b))
(defun (js:u+ a)    (js:unop "+" a))
(defun (js:u- a)    (js:unop "-" a))
(defun (js:toString x)
  (js:+ "" x))
(defun (js:toNum x)
  (js:u+ x))
(defun (NaN? x)
  ((js:js "isNaN") x))

(def / js:/)
(def % js:%)
(def < js:<)
(def > js:>)
(def <= js:<=)
(def >= js:>=)
(def = js:===)
(def != js:!==)

(def ++ (js:js "(function () {
  return Array.prototype.join.call(arguments, '');
})"))

(defun (+ # args) (foldl js:+ 0 args))
(defun (* # args) (foldl js:* 1 args))

(defun (- s # args)
  (if (nil? args)
    (js:u- s)
    (js:- s (apply + args))))

(defun (prop x p)
  (js:prop x p))
(defun (set-prop! x p v)
  (js:binop "=" (js:prop x p) v))

(defun (js:apply x m args)
  ((js:prop (js:prop x m) "apply") x (make-array args)))
(defun (js:call x m # args)
  (js:apply x m args))

(defun (js:method x m)
  (let (f (prop x m))
    (fun args
      ((js:prop f "apply") x (make-array args)))))

(defun (append2 lst1 lst2)
  (foldr cons lst2 lst1))

(defun (append # lsts)
  (foldr append2 '() lsts))

(defun (map-append f lst)
  (foldr append2 '() (map f lst)))

(defun (intercalate sep lst)
  (if (nil? lst)        '()
      (nil? (tail lst)) lst
      otherwise         (cons (head lst)
                              (cons sep (intercalate sep (tail lst))))))

(defun (length lst)
  (def i 0)
  (while (cons? lst)
    (setq! i (+ i 1))
    (setq! lst (tail lst)))
  i)
(defun (nth lst i)
  (while (> i 0)
    (unless (cons? lst)
      (error "List index out of bounds."))
    (setq! i (- i 1))
    (setq! lst (tail lst)))
  (head lst))

(defun (set-nth! lst i v)
  (while (> i 0)
    (unless (cons? lst)
      (error "List index out of bounds."))
    (dec! i)
    (set! lst (tail lst)))
  (set! (head lst) v))

; Let
(defmac (let bindings # body)
  `((fun ,(a:keys bindings) ,#body)
    ,#(a:values bindings)))

;;; Symbols
(defun (gensym # key)
  (let (k (if (= 0 (length key))
              "gensym"
              (apply ++ key)))
    ((js:js "(function (k) { return Symbol.create(k, true); })") k)))

(defun (gensym? s)
  (js:prop s "gensym"))

(defun (symbol? x)
  (js:binop "instanceof" x (js:js "Symbol")))
(defun (symbol # args)
  ((js:js "(function (s) { return Symbol.create(s); })") (apply ++ args)))
(defun (symbol->string s)
  (when (not (symbol? s))
    (error "Not a symbol"))
  (js:prop s "s"))
(defun (keyword? x)
  (and (symbol? x) (= ":" (s:charAt (symbol->string x) 0))))

;;; Logical operators
(defmac (and v # args)
  (if (nil? args)
    v
    (let (vvar (gensym))
      `(let (,vvar ,v)
         (if ,vvar (and ,#args) ,vvar)))))
(defmac (or v # args)
  (if (nil? args)
    v
    (let (vvar (gensym))
      `(let (,vvar ,v)
         (if ,vvar ,vvar (or ,#args))))))

(defun (all lst)
  (if (nil? lst)
    @true
    (and (head lst) (all (tail lst)))))
(defun (any lst)
  (if (nil? lst)
    @false
    (or (head lst) (any (tail lst)))))

;;; More lists
(defun (zip # lsts)
  (if (or (nil? lsts) (any (map nil? lsts)))
    '()
    (cons (map head lsts) (apply zip (map tail lsts)))))

(defun (init lst)
  ; Take the elements but the last one
  (if (nil? lst)
        (error "Empty list")
      (and (cons? lst) (nil? (tail lst)))
        '()
      otherwise
        (cons (head lst) (init (tail lst)))))
(defun (last lst)
  (if (nil? lst)
        (error "Empty list")
      (and (cons? lst) (nil? (tail lst)))
        (head lst)
      otherwise
        (last (tail lst))))

(defun (last-improper lst)
  (if (cons? lst)  (last-improper (tail lst))
      otherwise    lst))
(defun (init-improper lst)
  (if (cons? lst)  (cons (head lst) (init-improper (tail lst)))
      otherwise    '()))

(defun (as-improper lst end)
  (if (cons? lst)  (cons (head lst) (as-improper (tail lst) end))
      otherwise    end))

;;; Functions

; compose
(defun (. f # args)
  (if (nil? args)
    f
    (let (composed (apply . args))
      (fun a (f (apply composed a))))))
(defun (curry f)
  (fun (x) (fun (y) (f x y))))
(defun (uncurry f)
  (fun (x y) ((f x) y)))
(defun (partial f # args1)
  (fun args2
    (apply f (append args1 args2))))
(defun (flip f)
  (fun (x y)
    (f y x)))
; also known as 'call'
(defun ($ f # args)
  (apply f args))
(defun (chain x # funcs)
  (if (nil? funcs)
    x
    (apply chain (cons ((head funcs) x) (tail funcs)))))
(defun (id x) x)
(defun (const x) (fun (_) x))

;;; More control flow

; Sequentially define bindings (so future bindings can use prior bindings)
(defmac (let* bindings # body)
  (if (nil? bindings)
    `(do ,#body)
    `(let (,(head bindings) ,(head (tail bindings)))
       (let* ,(tail (tail bindings))
         ,#body))))

; Defines bindings "at once," so each binding can refer to any of the
; bindings, even if they are not guaranteed to be defined yet.
(defmac (letrec bindings # body)
  `(let ,(apply append (a:map (fun (k v) [k @null]) bindings))
     ,#(a:map (fun (k v) `(setq! ,k ,v)) bindings)
     ,#body))

; Other flavors of do
(defmac (do1 fst # body)
  (let (v (gensym))
    `(let (,v ,fst)
       ,#body
       ,v)))
(defmac (do2 fst # body)
  `(do ,fst (do1 ,#body)))


;;; More set!

; Parallel set
(defmac (pset! # pairs)
  (let (temps (a:map (fun (k v) (gensym k)) pairs))
    `(let ,(apply append (zip temps (a:values pairs)))
       (set! ,#(apply append (zip (a:keys pairs) temps)))
       @null)))

(defmac (inc! s # mdelta)
  (if (< 1 (length mdelta))
    (error "Incorrect number of arguments to inc!"))
  (let (delta (if (nil? mdelta) 1 (head mdelta)))
    `(set! ,s (+ ,s ,delta))))

(defmac (dec! s # mdelta)
  (if (< 1 (length mdelta))
    (error "Incorrect number of arguments to dec!"))
  (let (delta (if (nil? mdelta) 1 (head mdelta)))
    `(set! ,s (- ,s ,delta))))

(defmac (push! s v)
  `(set! ,s (cons ,v ,s)))
(defmac (pop! s)
  `(set! ,s (tail ,s)))

; Syntactic sugar for 'map'
(defmac (for v in lst # body)
  (if (not (= in 'in))
    (error "Missing keyword 'in' in for.")
    `(map (fun (,v) ,#body) ,lst)))

; Syntactic sugar for 'each'
(defmac (for_ v in lst # body)
  (if (not (= in 'in))
    (error "Missing keyword 'in' in for_.")
    `(each (fun (,v) ,#body) ,lst)))

(defmac (switch v # cases)
  (defun (_switch vv cases)
    (if (nil? cases)        @null
        (nil? (tail cases)) (head cases)
        (= 'otherwise (head cases))
          (head (tail cases))
        otherwise
          `(if (= ,vv ,(head cases))
             ,(head (tail cases))
             ,(_switch vv (tail (tail cases))))))
  (let* (has-as (= :as (head cases))
         vv (if has-as (nth cases 1) (gensym))
         cases2 (if has-as (tail (tail cases)) cases))
    `(let (,vv ,v)
       ,(_switch vv cases2))))

; "dispatch function"
; (dfun (msg1 a1 a2) cons (msg2 a1 a2) cons ... [alt])
; Also binds 'self to the created dfun in the body of the functions.
(defmac (dfun # cases)
  (defun (transform-cases v cases)
    (if (nil? cases)
          `((fun _ (error (++ "No such message: " (repr ,v)))))
        (nil? (tail cases))
          (let (_ (gensym))
            `((fun ,_ ,(head cases))))
        otherwise
          (let (msg (head (head cases))
                args (tail (head cases))
                conseq (head (tail cases)))
            `(,msg (fun ,args ,conseq)
                   ,#(transform-cases v (tail (tail cases)))))))
  (let* (v (gensym)
        args (gensym)
        has-as (= :as (head cases))
        self (if has-as (head (tail cases)) (gensym))
        cases2 (if has-as (tail (tail cases)) cases))
    `(letrec
       (,self (fun ,(cons v args)
                (apply (switch ,v ,#(transform-cases v cases2)) ,args)))
       ,self)))

(defmac (dfun2 # cases)
  (defun (transform-cases cases default)
    (if (nil? cases)
          '()
        (nil? (tail cases))
          (let (_ (gensym))
            (list (list (list 'quote default)
                        (list 'fun _ (head cases)))))
        otherwise
          (let (msg (head (head cases))
                args (tail (head cases))
                conseq (head (tail cases)))
            (cons (list msg (list 'fun args conseq))
                  (transform-cases (tail (tail cases)) default)))))
  (let* (v (gensym)
         msg (gensym)
         args (gensym)
         d (gensym)
         default (gensym))
(scope    (list 'letrec (list d (list 'dict)
                        msg @null
                        'self (list 'fun (cons v args)
                                (list 'set! msg v)
                                (list 'if (list 'dict:has? d v)
                                  (list 'apply (list 'dict:get d v) args)
                                  (list (list 'dict:get d (list 'quote default))))))
      (list 'dict:set! d (list 'quote default)
        (list 'fun '_
          (list 'error (list '++ "No such message: " (list 'repr msg)))))
      (cons 'do (for item in (transform-cases cases default)
                  (cons 'dict:set! (cons d item))))
      'self))))


;;; Arrays
(defun (a:push! a v)
  ((js:js "function (a, v) { return a.push(v); }") a v))
(defun (make-array # inits)
  (let (a (js:js "[]"))
    (for init in inits
      (for x in init
        (a:push! a x)))
    a))
(defun (a:join a sep)
  ((js:js "function (a, sep) { return a.join(sep); }") a sep))

(def a:slice (js:js "(function (a) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();
  return Array.prototype.slice.apply(a, args);
})"))
(def a:to-list (js:js "(function (a) {
  var l = new Nil();
  for (var i = a.length - 1; i >= 0; i--) {
    l = new Cons(a[i], l);
  }
  return l;
})"))

;;; Strings
(defun (s:length s)
  (js:prop s "length"))
(defun (s:charAt s i)
  ((js:js "(function (s, i) { return s.charAt(i); })") s i))
(defun (s:charCodeAt s i)
  ((js:js "(function (s, i) { return s.charCodeAt(i); })") s i))
(def s:slice (js:js "(function (s) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();
  return s.slice.apply(s, args);
})"))
(def s:indexOf (js:js "(function (s) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();
  return s.indexOf.apply(s, args);
})"))
(def s:fromCharCode (js:js "String.fromCharCode"))
; Remember: it's javascript split, so (s:split "ababa" 2) gives (a a)
(def s:split (js:js "(function (s) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();
  var ret = new Nil();
  var split = s.split.apply(s, args);
  for (var i = split.length - 1; i >= 0; i--) {
    ret = new Cons(split[i], ret);
  }
  return ret;
})"))

(defun (s:contains s sub)
  (!= -1 (s:indexOf s sub)))

(defun (s:join sep ss)
  (if (nil? ss)        ""
      (nil? (tail ss)) (head ss)
      otherwise        (++ (head ss) sep
                           (s:join sep (tail ss)))))

; Map a function over each character of a string, concatenate the
; resulting strings.
(defun (s:map-append f s)
  (let (parts (make-array)
        i 0)
    (while (< i (s:length s))
      (a:push! parts (f (s:charAt s i)))
      (setq! i (+ i 1)))
    (a:join parts "")))

;;; Dictionaries
(def Dict (js:js "(function () {
  function Dict () {}; return Dict;
})()"))
(defun (js:makeDict)
  (js:js "new globals.Dict()"))
(defun (dict? d)
  (js:binop "instanceof" d (js:js "globals.Dict")))
(def dict:get (js:js "(function (o, k, def) {
  if (globals['js:hasOwnProperty'](o, k)) {
    return o[k];
  } else if (def === undefined) {
    throw new Error('Key error: ' + k);
  } else {
    return def;
  }
})"))
(def dict:set! (js:js "(function (o, k, v) {
  if (v === undefined) {
    throw new Error(\"Not enough arguments passed to dict:set!\");
  }
  o[k] = v;
  return null;
})"))
(def dict:has? (js:js "(function (o, k) {
  return globals['js:hasOwnProperty'](o, k);
})"))
(defun (dict # pairs)
  (let (d (js:makeDict))
    (a:map (fun (k v) (dict:set! d k v)) pairs)
    d))
(defun (dict:items d)
  ((js:js "function (d) {
     var items = new Nil();
     for (var k in d) {
       if (globals['js:hasOwnProperty'](d, k))
         items = new Cons(new Cons(k, new Cons(d[k], new Nil())), items);
     }
     return items;
   }") d))


;;; Output

(def js:print (js:js "function (o) {
  process.stdout.write(''+o);
  return null;
}"))

(defun (print # xs)
  (for_ x in xs
    (if (string? x)
        (js:print x)
        (js:print (repr x)))))
(defun (println # xs)
  (apply print xs)
  (print "\n"))

; for debugging
(defun (probe msg x)
  (println "probe " msg ":" x)
  x)
(defun (scope x)
  (probe "scope" x))

(defun (js-escape-string s)
  (++ "\"" (s:map-append
            (fun (c)
              (switch c
                "\""  "\\\""
                "\n"  "\\n"
                "\t"  "\\t"
                "\r"  "\\r"
                "\\"  "\\\\"
                c))
            s)
      "\""))

(defun (repr x)
  (defun (repr-tail xs)
    (if (nil? (tail xs))   (++ (repr (head xs)) ")")
        (cons? (tail xs))  (++ (repr (head xs)) " " (repr-tail (tail xs)))
        otherwise          (++ (repr (head xs)) " # " (repr (tail xs)) ")")))
  (if (nil? x)       "()"
      (cons? x)      (if (cons? (tail x))
                       (switch (head x)
                         'quote            (++ "'" (repr (head (tail x))))
                         'quasiquote       (++ "`" (repr (head (tail x))))
                         'unquote          (++ "," (repr (head (tail x))))
                         'unquote-splicing (++ ",#" (repr (head (tail x))))
                         (++ "(" (repr-tail x)))
                       (++ "(" (repr-tail x)))
      (symbol? x)    (symbol->string x)
      (string? x)    (js-escape-string x)
      (null? x)      "@null"
      (undefined? x) "@undefined"
      (boolean? x)   (++ "@" (if x "true" "false"))
      otherwise      (js:toString x)))


;;; Pseudo-ADTs

(defmac (defstruct form)
  (let (name (head form)
        args (tail form))
    `(do (def ,(symbol "js:struct-" name "-constructor")
              (js:js "function Struct(comps) { this.components = comps; }"))
         ((js:js "function (c, name) {
              c.prototype.toString = function toString() {
                return '(' + name + this.components.map(function (c) {
                                       return ' '+globals.repr(c);
                                    }).join('') + ')';
              };
            }") ,(symbol "js:struct-" name "-constructor") ,(symbol->string name))
         ;; a constructor
         (defun ,form
           (((js:js "function (c) {
                return function () {
                  return new c(Array.prototype.slice.call(arguments));
                };
              }") ,(symbol "js:struct-" name "-constructor"))
            ,#args))
         ;; a predicate
         (defun (,(symbol name "?") o)
           (js:binop "instanceof" o ,(symbol "js:struct-" name "-constructor")))
         ;; a destructor
         (defun (,(symbol "destruct-" name) o f)
           (if (,(symbol name "?") o)
             ((js:js "function (o, f) { return f.apply(undefined, o.components); }")
              o f)
             (error ,(++ "Cannot destruct. Not " name ".")))))))

; For symmetry, cons and nil should have destructors (they already
; have predicates).

(defun (destruct-cons o f)
  (f (head o) (tail o)))
(defun (destruct-nil o f)
  (f))

; The destruction macro! Similar to Haskell "case" except doesn't yet
; handle sub-patterns.

(defmac (destruct v # bindings)
  (defun (handle-just-symbol pat)
    (if (symbol? pat)
      (cons pat (gensym))
      pat))
  (defun (_destruct vv bindings)
    (if (nil? bindings)
          @null
        (nil? (tail bindings))
          (head bindings)
        otherwise
          (let (pat (handle-just-symbol (head bindings))
                con (head (tail bindings))
                nextBindings (tail (tail bindings)))
            (if (= 'otherwise (head bindings))
                (head (tail bindings))
              `(if (,(symbol (head pat) "?") ,vv)
                 (,(symbol "destruct-" (head pat)) ,vv (fun ,(tail pat) ,con))
                 ,(_destruct vv nextBindings))))))
  (let* (has-as (= :as (head bindings))
         vv (if has-as (nth bindings 1) (gensym))
         bindings2 (if has-as (tail (tail bindings)) bindings))
    `(let (,vv ,v)
       ,(_destruct vv bindings2))))

; Exception handling

(defmac (try totry # rest)
  (let* (has-catch (= :catch (nth rest 0))
         catchvar (if has-catch (nth rest 1) (gensym))
         catch (if has-catch (nth rest 2) @null)
         rest2 (if has-catch (tail (tail (tail rest))) rest)
         has-finally (and (cons? rest2) (= :finally (head rest2)))
         finally (if has-finally (head (tail rest2)) @null))
  `(js:try ,totry ,catchvar ,catch ,finally)))

; macrolet

(add-macro! 'macrolet
  (fun (s env)
    (let (bindings (nth s 1)
          body (tail (tail s))
          subenv (env :make-subenv))
      (a:map (fun (k v)
               (let (f (eval-in-env v env))
                 (set! (macro-type f) "form")
                 (subenv :set! k f)))
             bindings)
      (macro-expand `(do ,#body) subenv))))

(add-macro! 'symbol-macrolet
  (fun (s env)
    (let (bindings (nth s 1)
          body (tail (tail s))
          subenv (env :make-subenv))
      (a:map (fun (k v)
               (let (f (eval-in-env v env))
                 (set! (macro-type f) "symbol")
                 (subenv :set! k f)))
             bindings)
      (macro-expand `(do ,#body) subenv))))

(defmac (with-places bindings # body)
  `(symbol-macrolet ,(apply append (a:map (fun (k v) `(,k (fun (,(gensym) ,(gensym)) ',v))) bindings))
     ,#body))


; arglist

;(defun (test-func a b &optional (c @null) &keyword (d 22))

;(test-func 1 2 :d 23)

(defun (compile-arglist alist)
  (defun (arglist-command? s)
    (and (symbol? s) (= "&" (s:charAt (symbol->string s) 0))))
  (defun (make-proper alist)
    (let (last (last-improper alist))
      (if (nil? last)
        alist
        (append (init-improper alist) `(&rest ,last)))))
  (defun (handle-defaults v)
    (if (symbol? v)
      (cons v @null)
      (cons (nth v 0) (nth v 1))))
  (defun (fun-handle-vararg offset)
    (++ "(function (args) {\n"
        "  var vargs = new Nil();\n"
        "  for (var i = args.length - 1; i >= " offset "; i--) {\n"
        "    vargs = new Cons(args[i], vargs);\n"
        "  }\n"
        "  return vargs;\n"
        "})(arguments)"))
  (let (code '()
        at-least 0
        at-most 0
        args '()
        rest-arg @null
        mode '&normal)
    (set! alist (make-proper alist))
    (while (not (nil? alist))
      (if (arglist-command? (head alist))
            (do (set! mode (head alist))
                (pop! alist))
          (switch mode
            '&normal (do (inc! at-least)
                         (inc! at-most)
                         (push! args (head alist))
                         (pop! alist))
            '&opt (let (vd (handle-defaults (head alist)))
                    (inc! at-most)
                    (push! args (head vd))
                    (push! code `(if (undefined? ,(head vd))
                                   (set! ,(head vd) ,(tail vd))))
                    (pop! alist))
            '&rest (do (set! at-most @null)
                       (set! rest-arg (head alist))
                       (push! code `(def ,rest-arg
                                         (js:js ,(fun-handle-vararg (length args)))))
                       (pop! alist))
            otherwise
              (error (++ "Unknown lambda list specifier " mode)))))
    [(reversed args)
     (append (if (< 0 at-least)
               [`(if (js:binop "<" (js:js "arguments.length") ,at-least)
                   (error ,(++ "Expecting at least " at-least " arguments.")))]
               [])
             (if (null? at-most)
               []
               [`(if (js:binop ">" (js:js "arguments.length") ,at-most)
                   (error ,(++ "Expecting at most " at-most " arguments.")))])
             (reversed code))
     at-least at-most]))

(defmac (named-fun name args # body)
  (let (argc (compile-arglist args))
    `(js:function ,name ,(nth argc 0)
       (do ,#(nth argc 1)
           ,#body))))

; TODO fix bug where defuns don't count as simultaneous local
; variables inside scope (it's not how javascript does it, at
; least, nor scheme)
