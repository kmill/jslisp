;;; 3_compiler.jsl
;;; Compiler to be compiled by 2_compiler

;; This should be compiled with
;; node 2_compiler.js 3_base.jsl 3_compiler.jsl -o 3_compiler.js

(def compiler-version ,(++ "4_compiler "
                           "built on "
                           (let (d (js:js "new Date()"))
                             (++ (+ 1 (js:call d "getMonth")) "/"
                                 (js:call d "getDate") "/"
                                 (js:call d "getFullYear")))))

;;; Streams

(def eof '(eof))
(defun (eof? x) (= x eof))

(defstruct (SourcePos source line col))
(defun (SourcePos-show pos)
  (destruct pos
    (SourcePos source line col)
      (++ source ":" line ":" col)
    (error (++ "Not a SourcePos: " (repr pos)))))

(defun (stream:make source s)
  (let (i 0
        len (s:length s)
        line 1
        col 0)
    ; update line and col based on character.
    (defun (advance c)
      (switch c
        "\n" (do (inc! line)
                 (set! col 0))
        (do (inc! col)))
      c)
    (dfun :as self
      (:eof?)
        (>= i len)
      (:peek)
        (if (< i len)
          (s:charAt s i)
          eof)
      (:read)
        (if (< i len)
          (do1 (advance (s:charAt s i))
               (inc! i))
          eof)
      (:read-until_ pred)
        ; doesn't return anything
        (while (let (c (self :peek))
                 (not (or (eof? c) (pred c))))
          (self :read))
      (:read-until pred)
        (let (start i)
          (self :read-until_ pred)
          (s:slice s start i))
      (:back-up) ; doesn't try hard to back up. used for errors
        (do (dec! i)
            (dec! col))
      (:pos)
        (SourcePos source line col))))

(defun (stream:error s msg)
  (error (++ (SourcePos-show (s :pos)) ": " msg)))
(defun (stream:error-expecting s expect)
  (stream:error s (++ "Expecting '" expect "'.")))

; Tries to read a particular character. Returns true (and reads) or
; false (if it doesn't)
(defun (stream:maybe-read s char)
  (and (= char (s :peek))
       (do (s :read) @true)))
(defun (stream:expect-read s char)
  (or (stream:maybe-read s char)
      (stream:error-expecting s char)))

(defun (stream:read-until-chars s chars)
  (s :read-until (fun (c) (s:contains chars c))))
(defun (stream:read-until-chars_ s chars)
  (s :read-until_ (fun (c) (s:contains chars c))))
(defun (stream:read-while-chars_ s chars)
  (s :read-until_ (fun (c) (not (s:contains chars c)))))

;;; Reader

(def reader-whitespace-chars " \t\n\r")

(defun (read:eat-spaces s)
  (stream:read-while-chars_ s reader-whitespace-chars)
  (while (= ";" (s :peek)) ; and eat comments, too
    (stream:read-until-chars_ s "\n")
    (stream:read-while-chars_ s reader-whitespace-chars)))


(def reader-non-symbol-chars reader-whitespace-chars)

(defun (make-reader-table)
  (let (table (dict)
        defaultHandler (fun (stream chars)
                         (stream:error stream "Unexpected.")))
    (dfun :as self
      (:read stream)
        (self :_read stream "")
      (:_read stream readChars)
        (let* (c (stream :peek)
               st (dict:get table c @null))
          (if (null? st)
            (defaultHandler stream readChars)
            (st :_read stream (++ readChars (stream :read)))))
      (:set-default-handler! dh)
        (set! defaultHandler dh)
      (:add-handler! f chars)
        (if (= 0 (s:length chars))
              (self :set-default-handler! f)
            otherwise
              (let (st (dict:get table (s:charAt chars 0) @null))
                (when (null? st)
                  (set! st (make-reader-table))
                  (dict:set! table (s:charAt chars 0) st))
                (st :add-handler! f (s:slice chars 1))))
      (:get-bound-chars)
        (s:join "" (for entry in (dict:items table)
                     (++ (first entry) ((second entry) :get-bound-chars)))))))

(def global-reader-table (make-reader-table))

; Adds handler to the table and updates the non-symbol-characters
(defun (set-reader-macro! chars handler)
  (global-reader-table :add-handler! handler chars)
  (set! reader-non-symbol-chars (++ (global-reader-table :get-bound-chars) reader-whitespace-chars))
  @null)



(defun (read:sexp-tail open close s)
  (def startpos (s :pos))
  (read:eat-spaces s)
  (if (s :eof?)
        (stream:error s (++ "Expecting '" close "' to match '" open "' near "
                            (SourcePos-show startpos) "."))
      (stream:maybe-read s close)
        '()
      otherwise
        (let (h (read s))
          (read:eat-spaces s)
          (if (stream:maybe-read s "#")
            (do1 (cons h (read s))
                 (read:eat-spaces s)
                 (stream:expect-read s close))
            (cons h (read:sexp-tail open close s))))))

(set-reader-macro! "("
  (fun (stream chars)
    (read:sexp-tail "(" ")" stream)))
(set-reader-macro! ")"
  (fun (stream chars)
    (stream :back-up)
    (stream:error stream "Unexpected ')'.")))
(set-reader-macro! "#"
  (fun (stream chars)
    (stream :back-up)
    (stream:error stream "Unexpected '#'.")))

(set-reader-macro! "["
  (fun (stream chars)
    (defun (consify lst)
      (if (nil? lst)  ''()
          (cons? lst) `(cons ,(head lst) ,(consify (tail lst)))
          otherwise   lst))
    (consify (read:sexp-tail "[" "]" stream))))
(set-reader-macro! "]"
  (fun (stream chars)
    (stream :back-up)
    (stream:error stream "Unexpected ']'.")))

(set-reader-macro! "{"
  (fun (stream chars)
    (cons 'dict (read:sexp-tail "{" "}" stream))))
(set-reader-macro! "}"
  (fun (stream chars)
    (stream :back-up)
    (stream:error stream "Unexpected '}'.")))

(defun (read:string quot s)
  (defun (_read-next)
    (stream:read-until-chars s (++ "\\" quot)))
  (let (r (make-array))
    (a:push! r (_read-next))
    (while (not (= quot (s :peek)))
      (when (s :eof?) (stream:error-expecting s quot))
      (s :read) ; eat backslash
      (let (esc (switch (s :peek)
                  "\\"  "\\"
                  quot  quot
                  "n"   "\n"
                  "t"   "\t"
                  "r"   "\r"
                  (stream:error s "Unknown escape code.")))
        (s :read) ; delayed so error is in right spot
        (a:push! r esc)
        (a:push! r (_read-next))))
    (s :read)
    (a:join r "")))

(set-reader-macro! "\""
  (fun (stream chars)
    (read:string "\"" stream)))
(set-reader-macro! "|"
  (fun (stream chars)
    (symbol (read:string "|" stream))))

(defun (read:token s)
  (stream:read-until-chars s reader-non-symbol-chars))

(set-reader-macro! ""
  (fun (stream chars)
    (let (t (read:token stream))
      (if (= "" t)
        (stream:error stream "Expecting symbol or number.")
        (let (val (js:toNum t))
          (if (and (NaN? val) (!= "NaN" t))
            (symbol t)
            val))))))

(set-reader-macro! "@"
  (fun (stream chars)
    (switch (read:token stream) :as t
      "true" @true
      "false" @false
      "null" @null
      "undefined" (js:js "void 0")
      otherwise
        (do (stream :back-up)
            (stream:error stream (++ "Unexpected literal " t))))))

(set-reader-macro! "'"
  (fun (stream chars)
    (list 'quote (read stream))))
(set-reader-macro! "`"
  (fun (stream chars)
    (list 'quasiquote (read stream))))
(set-reader-macro! ","
  (fun (stream chars)
    (list 'unquote (read stream))))
(set-reader-macro! ",#"
  (fun (stream chars)
    (list 'unquote-splicing (read stream))))

(defun (read s)
  (read:eat-spaces s)
  (if (s :eof?)
        (stream:error s "Unexpected end of input.")
      otherwise
        (global-reader-table :read s)))

(defun (read:has-another? s)
  (read:eat-spaces s)
  (not (s :eof?)))


; Makes a global environment in which javascript code can be
; evaluated.
(defun (make-global-env parent)
  (let* (globals2 ((js:js "function (d) {
                       function Subenv() {}
                       Subenv.prototype = d;
                       return new Subenv();
                     }") parent)
         closure ((js:js "function (globals) {
                        return function () {
                        return eval(arguments[0]);
                      };
                   }") globals2)
         all-code '())
    (dfun :as self
      (:make-subenv)
        (make-subenv self)
      (:eval_ code)
        (closure code)
      (:eval code)
        (do (set! all-code (cons code all-code))
            (self :eval_ code))
      (:code)
        (s:join "\n\n" (reversed all-code))
      (:lookup k)
        (let (v (prop (closure "globals") k))
          (if (= (js:js "undefined") v)
              (error (++ "No such global " k))
              v))
      (:has? k)
        (!= (js:js "undefined") (prop (closure "globals") k))
      ; TODO remove these two
      ('has? k) (self :has? k)
      ('lookup k) (self :lookup k)
      (:set! k v)
        (dict:set! (closure "globals") k v))))

(def global-env (make-global-env globals))

; Defines a lexical subenvironment
(defun (make-subenv parent)
  (let* (globals2 ((js:js "function (d) {
                       function Subenv() {}
                       Subenv.prototype = d;
                       return new Subenv();
                     }") (parent :eval_ "globals"))
         closure ((js:js "function (globals) {
                        return function () {
                        return eval(arguments[0]);
                      };
                   }") globals2)
         bindings (dict))
    (dfun :as self
      (:make-subenv)
        (make-subenv self)
      (:eval code)
        (self :eval_ code)
      (:eval_ code)
        (closure code)
      (:lookup k)
         (let (v (prop (closure "globals") k))
           (if (= (js:js "undefined") v)
               (error (++ "No such local or global " k))
               v))
;        (if (dict:has? bindings k)
;          (dict:get bindings k)
;          (parent :lookup k))
      (:has? k)
        (!= (js:js "undefined") (prop (closure "globals") k))
;        (or (dict:has? bindings k) (parent :has? k))
      ; TODO remove these two
      ('has? k) (self :has? k)
      ('lookup k) (self :lookup k)
      (:set! k v)
        (dict:set! (closure "globals") k v))))

(defun (macro? x)
  (and (function? x) (= (js:prop x "macro") @true)))
(defun (macro-type x)
  (js:prop x "macro-type"))
(defun (form-macro? x)
  (and (macro? x) (= "form" (macro-type x))))
(defun (symbol-macro? x)
  (and (macro? x) (= "symbol" (macro-type x))))

(defun (inner-add-macro! name f)
  (global-env :set! name f)
  (set! (prop f "macro") @true)
  (set! (prop f "macro-type") "form")
  @null)

(defun (inner-add-symbol-macro! name f)
  (global-env :set! name f)
  (set! (prop f "macro") @true)
  (set! (prop f "macro-type") "symbol")
  @null)

(defmac (defmac-inner v # body)
  `(inner-add-macro! ',(head v)
     (fun ,(tail v) ,#body)))

; Marks that the macro expansion is complete. This is for low-level
; macros to signal that they haven't expanded into something
; expandable.
(defstruct (NoExpand expr))

(defun (self-evaluating? s)
  (or (number? s) (boolean? s) (null? s) (string? s) (keyword? s)))

; For testing macro expansion
(defun (macro-expand-1 s)
  (destruct (macro-expand-step s global-env) :as exp
    (NoExpand expr)  expr
    otherwise        exp))

; The real deal
(defun (macro-expand s env)
  (destruct (macro-expand-step s env) :as exp
    (NoExpand expr)  expr
    otherwise        (macro-expand exp env)))

(defun (macro-expand-step s env)
  (if (self-evaluating? s)  (NoExpand s)
      (symbol? s)           (macro-expand-symbol s env)
      (cons? s)             (macro-expand-form s env)
      (error (++ "Unknown expression to macro expand " (repr s)))))

(defun (macro-expand-symbol s env)
  (if (and (env :has? s)
           (symbol-macro? (env :lookup s)))
        ((env :lookup s) s env)
      otherwise
        (NoExpand s)))

(defun (macro-expand-form s env)
  (if (and (env :has? (head s))
           (form-macro? (env :lookup (head s))))
        ((env :lookup (head s)) s env)
      otherwise
        (NoExpand (map (fun (e) (macro-expand e env)) s))))

;;; Low-level forms

;; Metaprogramming
(inner-add-macro! 'quote
  (fun (s env)
    (NoExpand s)))
(inner-add-macro! 'quasiquote
  (fun (s env)
    (quasiquote-expand (nth s 1) 0)))
(inner-add-macro! 'unquote
  (fun (s env)
    (eval-in-env (nth s 1) env)))

; initially stolen from http://3e8.org/pub/scheme/doc/Quasiquotation%20in%20Lisp%20(Bawden).pdf

(defun (quasi-append # things)
  (defun (is-empty? s)
    (or (and (cons? s) (= 'quote (head s)) (nil? (head (tail s))))
        (and (cons? s) (= 'list (head s)) (nil? (tail s)))))
  (if (nil? things)
        ''()
      (= 1 (length things))
        (head things)
      (is-empty? (head things))
        (apply quasi-append (tail things))
      (is-empty? (nth things 1))
        (apply quasi-append (cons (head things) (tail (tail things))))
      (and (cons? (head things)) (= 'cons (head (head things))))
        (quasi-cons (nth (head things) 1)
                    (apply quasi-append (cons (nth (head things) 2) (tail things))))
      (and (cons? (head things)) (= 'list (head (head things))))
        (quasi-cons (nth (head things) 1)
                    (apply quasi-append (cons `(list ,#(tail (tail (head things))))
                                              (tail things))))
      otherwise
        `(append2 ,(head things) ,(apply quasi-append (tail things)))))
    

(defun (quasi-cons x xs)
  (if (and (cons? xs) (= 'list (head xs)))
    `(list ,x ,#(tail xs))
    `(cons ,x ,xs)))
(defun (quasi-list # things)
  `(list ,#things))

(defun (quasiquote-expand s depth)
  (if (cons? s)
        (switch (head s)
          'quasiquote
            (quasi-cons ''quasiquote
                        (quasiquote-expand (tail s) (+ depth 1)))
          'unquote
            (if (> depth 0)
                  (quasi-cons ''unquote
                              (quasiquote-expand (tail s) (- depth 1)))
                (and (not (nil? (tail s)))
                     (nil? (tail (tail s))))
                  (nth s 1)
                otherwise
                  `',s)
          'unquote-splicing
            (if (> depth 0)
                  (quasi-cons ''unquote-splicing
                              (quasiquote-expand (tail s) (- depth 1)))
                otherwise
                  `',s)
          otherwise
            (if (and (cons? (tail s)) (= 'unquote (head (tail s))))
              (quasiquote-expand-list (head s) depth (nth (tail s) 1))
              (quasi-append (quasiquote-expand-list (head s) depth ''())
                            (quasiquote-expand (tail s) depth))))
      otherwise
        `',s))

(defun (quasiquote-expand-list s depth end)
  (if (cons? s)
        (switch (head s)
          'quasiquote
            (quasi-cons (quasi-cons ''quasiquote
                                    (quasiquote-expand (tail s) (+ depth 1)))
                        end)
          'unquote
            (if (> depth 0)
                  (quasi-cons (quasi-cons ''unquote
                                          (quasiquote-expand (tail s) (- depth 1)))
                              end)
                otherwise
                  ;(apply quasi-list (tail s))
                  (quasi-cons (nth s 1) end))
          'unquote-splicing
            (if (> depth 0)
                  (quasi-cons (quasi-cons ''unquote-splicing
                                          (quasiquote-expand (tail s) (- depth 1)))
                              end)
                otherwise
                  ;(apply quasi-append (tail s)))
                  (if (and (cons? end) (= 'quote (head end)) (nil? (nth end 1)))
                    (apply quasi-append (tail s))
                    `(as-improper ,(apply quasi-append (tail s)) ,end)))
          otherwise
            (quasi-cons (quasi-append (quasiquote-expand-list (head s) depth ''())
                                      (quasiquote-expand (tail s) depth))
                        end))
      otherwise
        `(cons ',s ,end)))


;; Javascript forms
(inner-add-macro! 'js:def
  (fun (s env)
    (NoExpand (list 'js:def (nth s 1) (macro-expand (nth s 2) env)))))
(inner-add-macro! 'js:if
  (fun (s env)
    (NoExpand (list 'js:if
                    (macro-expand (nth s 1) env)
                    (macro-expand (nth s 2) env)
                    (macro-expand (nth s 3) env)))))
(inner-add-macro! 'js:while
  (fun (s env)
    (NoExpand (list 'js:while
                    (macro-expand (nth s 1) env)
                    (macro-expand (nth s 2) env)))))
(inner-add-macro! 'js:return
  (fun (s env)
    (NoExpand (list 'js:return (macro-expand (nth s 1) env)))))
(inner-add-macro! 'js:break
  (fun (s env) (NoExpand s)))
(inner-add-macro! 'js:continue
  (fun (s env) (NoExpand s)))
(inner-add-macro! 'js:seq
  (fun (s env)
    (NoExpand (list 'js:seq (map (fun (e) (macro-expand e env)) (nth s 1))))))
(inner-add-macro! 'js:js
  (fun (s env) (NoExpand s)))
(inner-add-macro! 'js:code
  (fun (s env) (NoExpand s)))
(inner-add-macro! 'js:binop
  (fun (s env)
    (NoExpand (list 'js:binop (nth s 1)
                    (macro-expand (nth s 2) env)
                    (macro-expand (nth s 3) env)))))
(inner-add-macro! 'js:unop
  (fun (s env)
    (NoExpand (list 'js:unop (nth s 1) (macro-expand (nth s 2) env)))))
(inner-add-macro! 'js:prop
  (fun (s env)
    (NoExpand (list 'js:prop
                    (macro-expand (nth s 1) env)
                    (macro-expand (nth s 2) env)))))
(inner-add-macro! 'js:try
  (fun (s env)
    (NoExpand (list 'js:try
                    (macro-expand (nth s 1) env)
                    (nth s 2)
                    (let (env2 (env :make-subenv))
                      (env2 :set! (nth s 2) @null)
                      (macro-expand (nth s 3) env2))
                    (if (null? (nth s 4))
                        @null
                        (macro-expand (nth s 4) env))))))
(inner-add-macro! 'js:throw
  (fun (s env)
    (NoExpand (list 'js:throw
                    (macro-expand (nth s 1) env)))))
(inner-add-macro! 'js:function
  (fun (s env)
    (if (cons? (nth s 1))
          (list 'js:function @null (nth s 1) (nth s 2))
        otherwise
          (let (env2 (env :make-subenv))
            (for_ k in (nth s 2)
              (env2 :set! k @null))
            (NoExpand (list 'js:function (nth s 1) (nth s 2)
                            (macro-expand (nth s 3) env2)))))))

;;; Compiling to midir

; The mid-IR gives access to javascript control-flow primitives

; expressions
(defstruct (midir:js code))
(defstruct (midir:binop op expl expr))
(defstruct (midir:unop op exp))
(defstruct (midir:prop exp prop))
(defstruct (midir:lit s))
(defstruct (midir:lookup s))
(defstruct (midir:funcall f args))
(defstruct (midir:function mname args body))
(defstruct (midir:nop))

; statements
(defstruct (midir:code code))
(defstruct (midir:expr expr))
(defstruct (midir:def var expr))
(defstruct (midir:if cexpr bcons balt))
(defstruct (midir:while expr body))
(defstruct (midir:return expr))
(defstruct (midir:break))
(defstruct (midir:continue))
(defstruct (midir:throw expr))
(defstruct (midir:try ts var cs mfinally))
(defstruct (midir:seq statements))

; Monad-ish thing for composing statements/expressions
(defstruct (MidirExpr expr))
(defstruct (MidirStatement statement expr))
(defun (midir-splice m1 m2f)
  (destruct m1
    (MidirExpr expr1)
      (m2f expr1)
    (MidirStatement statement1 expr1)
      (destruct (m2f expr1)
        (MidirExpr expr2)
          (MidirStatement statement1 expr2)
        (MidirStatement statement2 expr2)
          (MidirStatement (midir:seq [statement1 statement2]) expr2))))
(defun (midir-join m1 m2)
  (destruct m2
    (MidirExpr expr2)
      (MidirStatement (midir-close m1) expr2)
    (MidirStatement statement2 expr2)
      (MidirStatement (midir:seq [(midir-close m1) statement2])
                      expr2)))
(defun (midir-close m)
  (destruct m
    (MidirExpr expr)
      (destruct expr
        (midir:nop)
          (midir:seq '())
        (midir:expr expr))
    (MidirStatement stat expr)
      (destruct expr
        (midir:nop)
          stat
        otherwise
          (midir:seq [stat (midir:expr expr)]))))
(defun (midir-unlist ms)
  (defun (-unlist m)
    (destruct m
      (MidirExpr expr)
        [[] expr]
      (MidirStatement stat expr)
        [[stat] expr]))
  (let (ul (apply zip (map -unlist ms)))
    (if (nil? ul)
      [[] []]
      [(apply append (head ul)) (head (tail ul))])))
(defun (midir-set v expr)
  (MidirStatement (midir:expr (midir:binop "=" (midir:lookup v) expr)) (midir:nop)))

(defun (make-js-env parent # bindings)
  (let (d (apply dict bindings))
    (dfun
      (:lookup k)
        (if (dict:has? d k)  (dict:get d k)
            (null? parent)   (error (++ "Environment key error: " (repr k)))
            otherwise        (parent :lookup k))
      (:has? k)
        (if (dict:has? d k) @true
            (null? parent)   @false
            (parent :has? k))
      (:set! k v)
        (dict:set! d k v))))


(defun (compile-to-midir-toplevel exp env igen)
  (if (cons? exp)
      (switch (head exp)
        'js:def (compile-to-midir
                  `(js:seq ((js:binop "=" ,(nth exp 1) ,(nth exp 2))
                            @null))
                  env igen)
        'js:seq (foldl (fun (acc next)
                         (midir-join acc (compile-to-midir-toplevel next env igen)))
                       (MidirExpr (midir:nop))
                       (nth exp 1))
        (compile-to-midir exp env igen))
      (compile-to-midir exp env igen)))

(defun (compile-to-midir exp env igen)
  (if (self-evaluating? exp)  (MidirExpr (midir:lit exp))
      (symbol? exp)           (if (env :has? exp)
                                  (MidirExpr (midir:lookup (env :lookup exp)))
                                  (MidirExpr (midir:prop (midir:lookup "globals")
                                                         (midir:lit (symbol->string exp)))))
      (cons? exp)
        (compile-form-to-midir exp env igen)
      (error (++ "Unknown expression " (repr exp)))))

(defun (compile-form-to-midir exp env igen)
  (defun (comp e) (compile-to-midir e env igen))
  (switch (head exp)
    'quote      (MidirExpr (midir:lit (nth exp 1)))
    'js:def     (let (var  (igen :get (nth exp 1)))
                  (env :set! (nth exp 1) var)
                  (let (expr (comp (nth exp 2)))
                    (midir-splice expr
                      (fun (e) (MidirStatement (midir:def var e) (midir:nop))))))
    'js:if      (let (cexpr (comp (nth exp 1))
                      bcons (comp (nth exp 2))
                      balt  (comp (nth exp 3))
                      outvar (igen :new "if"))
                  (midir-splice cexpr
                    (fun (ce)
                      (MidirStatement
                        (midir:seq
                          [(midir:def outvar (midir:nop))
                           (midir:if ce
                             (midir-close (midir-splice bcons
                                            (fun (be) (midir-set outvar be))))
                             (midir-close (midir-splice balt
                                            (fun (ae) (midir-set outvar ae)))))])
                        (midir:lookup outvar)))))
    'js:while   (let (cexpr (comp (nth exp 1))
                      cexpr-inside (comp (nth exp 1))
                      body  (comp (nth exp 2))
                      outvar (igen :new "while"))
                  (midir-splice cexpr
                    (fun (ce)
                      (MidirStatement
                        (midir:seq
                          (list
                            (midir:def outvar ce)
                            (midir:while (midir:lookup outvar)
                              (midir:seq
                                (list (midir-close body)
                                      (midir-close (midir-splice cexpr-inside
                                                     (fun (ce)
                                                       (MidirExpr
                                                         (midir:binop "=" (midir:lookup outvar)
                                                                      ce))))))))))
                        (midir:nop)))))
    'js:return  (let (expr (comp (nth exp 1)))
                  (midir-splice expr
                    (fun (e)
                      (MidirStatement (midir:return e) (midir:nop)))))
    'js:break  (MidirStatement (midir:break) (midir:nop))
    'js:continue  (MidirStatement (midir:continue) (midir:nop))
    'js:seq    (foldl (fun (acc next)
                        (midir-join acc (comp next)))
                      (MidirExpr (midir:nop))
                      (nth exp 1))
    'js:js     (MidirExpr (midir:js (head (tail exp))))
    'js:code   (MidirStatement (midir:code (nth exp 1)) (midir:nop))
    'js:binop  (let (expl (comp (nth exp 2))
                     expr (comp (nth exp 3)))
                 (midir-splice expl
                   (fun (el)
                     (midir-splice expr
                       (fun (er)
                         (MidirExpr (midir:binop (nth exp 1) el er)))))))
    'js:unop   (let (expr (comp (nth exp 2)))
                 (midir-splice expr
                   (fun (e)
                     (MidirExpr (midir:unop (head (tail exp)) e)))))
    'js:prop   (let (expr  (comp (nth exp 1))
                     iexpr (comp (nth exp 2)))
                 (midir-splice expr
                   (fun (e)
                     (midir-splice iexpr
                       (fun (ie)
                         (MidirExpr (midir:prop e ie)))))))
    'js:throw    (let (expr (nth exp 1))
                   (midir-splice (comp expr)
                     (fun (el)
                       (MidirStatement (midir:throw el) (midir:nop)))))
    'js:try      (let (texp (nth exp 1)
                       cv   (igen :get (nth exp 2))
                       cexp (nth exp 3)
                       fexp (nth exp 4)
                       outvar (igen :new "try"))
                   (let (env2 (make-js-env env (nth exp 2) cv))
                     (MidirStatement
                       (midir:seq
                         (list
                           (midir:def outvar (midir:nop))
                           (midir:try
                             (midir-close (midir-splice (comp texp)
                                            (fun (te) (midir-set outvar te))))
                             cv
                             (midir-close (midir-splice
                                            (compile-to-midir cexp env2 igen)
                                            (fun (ce) (midir-set outvar ce))))
                             (if (null? fexp)
                                 @null
                                 (midir-close (comp fexp))))))
                       (midir:lookup outvar))))
    'js:function (let* (name (nth exp 1)
                        args (map (fun (a) (igen :get a)) (nth exp 2))
                        argse (if (null? name) (nth exp 2) (cons name (nth exp 2)))
                        body (nth exp 3)
                        env2 (apply make-js-env (cons env (map-append (fun (v) [v (igen :get v)])
                                                                      argse))))
                   
                   (MidirExpr
                     (midir:function (if (null? name) @null (igen :get name)) args
                       (midir-close
                         (midir-splice
                           (compile-to-midir body env2 igen)
                           (fun (e) (MidirStatement (midir:return e)
                                                    (midir:nop))))))))
    
    (midir-splice (comp (head exp))
      (fun (f)
        (let (ul (midir-unlist (map comp (tail exp)))
              outvar (igen :new "funcall"))
          (MidirStatement
            (midir:seq
              [(midir:seq (head ul))
               (midir:def outvar (midir:funcall f (head (tail ul))))])
            (midir:lookup outvar)))))))
                

;;; Generating js

(defun (midir-expr-to-js m)
  (destruct m
    (midir:js code)
      (++ "(" code ")")
    (midir:binop op expl expr)
      (++ "(" (midir-expr-to-js expl) " " op " " (midir-expr-to-js expr) ")")
    (midir:unop op exp)
      (++ "(" op " " (midir-expr-to-js exp) ")")
    (midir:prop exp iexp)
      (++ "(" (midir-expr-to-js exp) "[" (midir-expr-to-js iexp) "])")
    (midir:lit s)
      (++ "(" (midir-lit-to-js s) ")")
    (midir:lookup s)
      s
    (midir:funcall f args)
      (++ "(" (midir-expr-to-js f) "(" (s:join ", " (map midir-expr-to-js args)) "))")
    (midir:function mname args body)
      (++ "(function "
          (if (null? mname) "" mname)
          "(" (s:join ", " args) ") {\n"
          (midir-statement-to-js body)
          "})")
    (midir:nop)
      "(null)"
    (error (++ "Unknown expr: " (repr m)))))

(defun (midir-statement-to-js m)
  (destruct m
    (midir:code code)
      (++ code ";\n")
    (midir:expr expr)
      (++ (midir-expr-to-js expr) ";\n")
    (midir:def var expr)
      (++ "var " var " = " (midir-expr-to-js expr) ";\n")
    (midir:if expr bcons balt)
      (++ "if (" (midir-expr-to-js expr) ") {\n"
          (midir-statement-to-js bcons)
          "} else {\n"
          (midir-statement-to-js balt)
          "}\n")
    (midir:while expr body)
      (++ "while (" (midir-expr-to-js expr) ") {\n"
          (midir-statement-to-js body)
          "}\n")
    (midir:return expr)
      (++ "return " (midir-expr-to-js expr) ";\n")
    (midir:break)
      "break;\n"
    (midir:continue)
      "break;\n"
    (midir:throw expr)
      (++ "throw " (midir-expr-to-js expr) ";\n")
    (midir:try ts var cs mfinally)
      (++ "try {\n"
          (midir-statement-to-js ts)
          "} catch (" var ") {\n"
          (midir-statement-to-js cs)
          "}"
          (if (null? mfinally)
              ""
              (++ " finally {\n" (midir-statement-to-js mfinally) "}"))
          "\n")
    (midir:seq statements)
      (s:join "" (map midir-statement-to-js statements))
    (error (++ "Unknown statement: " (repr m)))))

(defun (midir-lit-to-js l)
  (if (nil? l)    "new Nil()"
      (cons? l)   (++ "new Cons("
                      (midir-lit-to-js (head l))
                      ", "
                      (midir-lit-to-js (tail l))
                      ")")
      (null? l)   "null"
      (boolean? l) (if l "true" "false")
      (symbol? l) (++ "Symbol.create(" (js-escape-string (symbol->string l))
                      (if (gensym? l) (error "Can't compile non-interned symbol") "") ; todo: figure out
                      ")")
      (number? l) (js:toString l)
      (string? l) (js-escape-string l)
      otherwise   (error (++ "Cannot compile literal: " (repr l)))))

(defun (clean-js-identifier s)
  (defun (-ci i)
    (if (< i (s:length s))
        (cons (if (or (and (<= "A" (s:charAt s i)) (<= (s:charAt s i) "Z"))
                      (and (<= "a" (s:charAt s i)) (<= (s:charAt s i) "z"))
                      (and (<= "0" (s:charAt s i)) (<= (s:charAt s i) "9"))
                      (= "$" (s:charAt s i)))
                (s:charAt s i)
                "_")
          (-ci (+ i 1)))
        '()))
  (apply ++ (-ci 0)))

(defun (make-js-ident-gen)
  (let (ids (dict)
        nextnum 0)
    (dfun
      (:get symb)
        (if (dict:has? ids symb)
          (dict:get ids symb)
          (let (id (++ (clean-js-identifier (symbol->string symb)) "_" nextnum))
            (set! nextnum (+ 1 nextnum))
            (dict:set! ids symb id)
            id))
      (:new prefix)
        (do1 (++ prefix "_" nextnum)
             (set! nextnum (+ 1 nextnum))))))


;;; Compilation

(defun (eval s)
  (eval-in-env s global-env))

(def eval-print-macro-expand @false
     eval-print-midir @false
     eval-print-js @false)

(defun (eval-in-env s env)
  (let* (s2 (macro-expand s env)
         midir (midir-close (compile-to-midir-toplevel s2 (make-js-env @null) (make-js-ident-gen)))
         js (midir-statement-to-js midir))
    (when eval-print-macro-expand (println s2))
    (when eval-print-midir (println midir))
    (when eval-print-js (println js))
    (env :eval js)))

(defun (compile-stream s)
  (let (res @null)
    (while (read:has-another? s)
      (set! res (eval-in-env (read s) global-env)))
    res))

(defun (compile-file fn)
  (let (s (stream:make fn (load-file fn)))
    (compile-stream s)))
(global-env :set! 'compile-file compile-file)

(defun (compile-string str)
  (let (s (stream:make "<input>" str))
    (compile-stream s)))


(defun (write-code output-file global-env)
  (def code (++ "module.exports = (function () {\nvar globals={};\n\n"
                (global-env :code)
                "return globals;"
                "\n})();\n"))
  (when (global-env :has? "main")
    (set! code (++ code "if (process && !module.parent) module.exports.main(module.exports.list.apply(undefined, process.argv.slice(2)));\n")))
  (write-file output-file code))

(defun (write-file filename content)
  (let (fs (js:js "require('fs')"))
    ((js:method fs "writeFileSync") filename content {'encoding "utf8"})
    @null))
(defun (load-file filename)
  (let (fs (js:js "require('fs')"))
    ((js:method fs "readFileSync") filename {'encoding "utf8"})))

(def load load-file)

(def repl-run-code compile-string)

(def $ null
     $$ null
     $$$ null)


(defun (make-stdin-collector)
  (defun (do-eval code)
    (try (let (r (repl-run-code code))
           (pset! $$$ $$
                  $$ $
                  $ r)
           (unless (null? r)
             (println r)))
       :catch x
         (do (println x)
             (println (prop x "stack"))))
    (print "> "))

  (let (stdin (js:js "process.stdin")
        utterances '()
        inner @false)
    (println "jslisp. version: " compiler-version)
    (println)
    (print "> ")
    (js:call stdin 'resume)
    (js:call stdin 'setEncoding "utf8")
    (js:call stdin 'on "data"
      (fun (line)
        (if (= line "@INFERIOR-JSLISP-SEPARATOR\n")
            (let (code (apply ++ (reversed utterances)))
              (set! utterances '())
              (set! inner @false)
              (do-eval code))
            inner
              (do (push! utterances line))
            (= line "@INFERIOR-JSLISP-SEPARATOR-START\n")
              (set! inner @true)
            (do-eval line))))))

(defun (run-repl)
  (let* (readline (js:js "require('readline')")
         rl ((js:method readline "createInterface")
              {'input  (js:js "process.stdin")
               'output (js:js "process.stdout")})
         shouldQuit @false)

    ((js:method rl "setPrompt") "> ")
    ((js:method rl "prompt"))

    (defun (handleLine line)
      (try (let (r (repl-run-code line))
             (pset! $$$ $$
                    $$ $
                    $ r)
             (unless (null? r)
               (println r)))
        :catch x
          ((js:js "console.log") (prop x "stack"))))

    ((js:method rl "on") "line"
     (fun (line)
       (set! shouldQuit @false)
       (handleLine line)
       ((js:method rl "prompt"))))
    ((js:method rl "on") "close"
     (fun () (println "Goodbye!")))
    ((js:method rl "on") "SIGINT"
     (fun ()
       (if shouldQuit
         (do (println "Goodbye!")
             (js:code "process.exit(0);"))
         (do (set! shouldQuit @true)
             (println "Press C-c again to quit.")
             ((js:method rl "prompt"))))))))

(defun (main args)
  (def input-files '())
  (def output-file @null)
  (def run-repl? @false)
  (def use-readline? @true)
  (defun (option-parser args)
    (when (not (nil? args))
      (switch (head args)
        "-o"  (do (set! args (tail args))
                  (set! output-file (head args)))
        "-no-rl"
              (set! use-readline? @false)
        "-r"  (set! run-repl? @true)
        "-pj" (set! eval-print-js @true)
        "-pm" (set! eval-print-macro-expand @true)
        (do (set! input-files (cons (head args) input-files))))
      (option-parser (tail args))))
  (option-parser args)
  (for fn in (reversed input-files)
    (print "Compiling " fn "\n")
    (compile-file fn))
  (unless (null? output-file)
    (when (nil? input-files)
      (error "Does not make sense to output file without input."))
    (write-code output-file global-env)
    (print "Output code to " output-file "\n"))
  (when (or (nil? input-files) run-repl?)
    (if use-readline?
        (run-repl)
        (make-stdin-collector))))
