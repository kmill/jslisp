;;;;;;;;;;;;;;;;;;;;;
;;; Sanity checks ;;;
;;;;;;;;;;;;;;;;;;;;;

(def num-tests-succeeded 0)

(defmac assert (fun (_ msg # body)
  (list 'do (list 'console msg)
            (list 'if (list 'not (cons 'do body))
                  (list 'error (list '++ (quote "Assertion failed: ") msg)))
            '(set! num-tests-succeeded (+ 1 num-tests-succeeded)))))

(assert "this should work 1" true)
(assert "this should work 2" (not false))
(assert "and test 1" (and true (= 1 1) (not (= 1 2))))
(assert "and test 2" (not (and false (error "uh oh"))))
(assert "or test 1" (or false true))
(assert "or test 2" (or true (error "uh on")))

(assert "do test 1" (= 1 (do 1)))
(assert "do test 2" (= 1 (do 2 1)))
(def do-test 2)
(assert "do test 3" (= 22 (do (set! do-test 22) do-test)))

(defun (fact1 n)
  (defun (_fact acc i)
    (if (<= i 1)
      acc
      (_fact (* acc i) (- i 1))))
  (_fact 1 n))

(assert "fact1 test" (= 120 (fact1 5)))

(defun (fact2 n)
  (if (<= n 1)
    1
    (* n (fact2 (- n 1)))))

(assert "fact2 test" (= 120 (fact2 5)))

(assert "cons? test 1" (cons? '(1)))
(assert "cons? test 2" (not (cons? '())))
(assert "head test" (= 1 (head '(1))))
(assert "tail test" (= 2 (tail (cons 1 2))))
(assert "nil? test 1" (nil? '()))
(assert "nil? test 2" (not (nil? '(1))))
(assert "nil? test 3" (not (nil? null)))
(assert "number? test 1" (number? 22))
(assert "number? test 2" (not (number? '(1))))
(assert "null? test 1" (null? null))
(assert "null? test 2" (not (null? 22)))
(assert "null? test 3" (not (null? '())))

(assert "apply test" (= 22 (apply + '(1 2 19))))

(defun (head= l1 l2)
  (if (nil? l1)               (nil? l2)
      (nil? l2)               false
      (= (head l1) (head l2)) (head= (tail l1) (tail l2))
      otherwise               false))

(assert "head= tests"
  (and (head= '() '())
       (not (head= '(1) '()))
       (not (head= '() '(1)))
       (not (head= '(2) '(1)))
       (head= '(1) '(1))
       (head= '(1 2) '(1 2))
       (not (head= '(1 2) '(2 1)))
       (not (head= '(1 2 3) '(1 3 2)))))

(assert "list test 1" (nil? (list)))
(assert "list test 2" (cons? (list 1)))
(assert "list test 3" (head= '(1) (list 1)))
(assert "list test 4" (head= '(1 2 3)
				                      (apply list '(1 2 3))))

(def mask-test 22)
(defun (mask-tester mask-test)
  (defun (f x)
    (let (mask-test 21)
      (set! mask-test 20))
    (+ 12 mask-test x))
  (set! mask-test 5)
  (f mask-test))

(assert "mask-test 1" (= 22 (mask-tester 1)))
(assert "mask-test 2" (= 22 mask-test))

(def closure-test
  (let (acc 0)
    (fun (i)
      (set! acc (+ acc i))
      acc)))
(assert "closure-test 1" (= 0 (closure-test 0)))
(assert "closure-test 2" (= 1 (closure-test 1)))
(assert "closure-test 3" (= 2 (closure-test 1)))
(assert "closure-test 4" (= 0 (closure-test -2)))

(defun (do-set-test)
  (def set-test 0)
  (set! set-test 22)
  (assert "set-test" (= set-test 22)))
(do-set-test)

(assert "if test 1" (null? (if)))
(assert "if test 2" (= 22 (if 22)))
(assert "if test 3" (null? (if false 22)))
(assert "if test 4" (= 22 (if true 22)))
(assert "if test 5" (= 22 (if true 22 23)))
(assert "if test 6" (= 23 (if false 22 23)))
(assert "if test 7" (= 22 (if true 22 otherwise 23)))
(assert "if test 8" (= 23 (if false 22 otherwise 23)))
(assert "if test 9" (= 24 (if false 22 false 23 24)))
(assert "if test 10" (= 24 (if false 22 false 23 otherwise 24)))

(defmac always-22 (fun (_) 22))
(assert "always-22 test" (= 22 (always-22)))

(assert "foldl test 1" (= 0 (foldl + 0 '())))
(assert "foldl test 2" (= 22 (foldl + 0 '(22))))
(assert "foldl test 3" (= 6 (foldl + 0 '(1 2 3))))
(assert "foldr test 1" (= 0 (foldr + 0 '())))
(assert "foldr test 2" (= 22 (foldr + 0 '(22))))
(assert "foldr test 3" (= 6 (foldr + 0 '(1 2 3))))

(assert "map test 1" (nil? (map (fun (i) (+ i 1)) '())))
(assert "map test 2" (head= '(1 2 3) (map (fun (i) (+ i 1)) '(0 1 2))))

(def each-accum 0)
(each (fun (i) (set! each-accum (+ each-accum i)))
      '(1 2 3 4 5 6 7 8 9 10))
(assert "each test" (= each-accum 55))

(assert "a:keys test" (head= '(0 2 4) (a:keys '(0 1 2 3 4 5))))
(assert "a:values test" (head= '(1 3 5) (a:values '(0 1 2 3 4 5))))

(assert "let test 1" (let () true))
(assert "let test 2" (let (x true) x))
(assert "let test 3" (let (each-accum true) (= each-accum true)))
(assert "let test 4" (let (x 4) (= x 4)))
(assert "let test 5" (= 5 ((let (x 5) (fun () x)))))

(assert "+ test 1" (= 0 (+)))
(assert "+ test 2" (= 1 (+ 1)))
(assert "+ test 3" (= 3 (+ 1 2)))
(assert "+ test 4" (= 6 (+ 1 2 3)))

(assert "++ test" (= "hello, world" (++ "hello," " " "world")))

(assert "- test 1" (= -2 (- 2)))
(assert "- test 2" (= -1 (- 1 2)))

(assert "append test 1" (head= '() (append)))
(assert "append test 2" (head= '() (append '())))
(assert "append test 3" (head= '() (append '() '())))
(assert "append test 4" (head= '(1) (append '() '(1))))
(assert "append test 5" (head= '(1) (append '(1) '())))
(assert "append test 6" (head= '(1 2) (append '(1) '(2))))
(assert "append test 7" (head= '(1 2 3) (append '(1) '(2) '(3))))
(assert "append test 8" (head= '(1 2 3) (append '(1) '(2 3))))

(assert "intercalate test 1" (head= '() (intercalate 2 '())))
(assert "intercalate test 2" (head= '(1) (intercalate 2 '(1))))
(assert "intercalate test 3" (head= '(1 2 1) (intercalate 2 '(1 1))))

(assert "gensym test" (not (= (gensym) (gensym))))

(assert "s:length test" (= 5 (s:length "hello")))
(assert "s:charAt test" (= 'e (s:charAt "hello" 1)))
(assert "s:charCodeAt test" (= 10 (s:charCodeAt "nl\nok" 2)))
(assert "s:slice test" (= "ll" (s:slice "hello" 2 4)))
(assert "s:indexOf test 1" (= 2 (s:indexOf "hello" "ll")))
(assert "s:indexOf test 2" (= -1 (s:indexOf "hello" "lll")))
(assert "s:fromCharCode test" (= "\n" (s:fromCharCode 10)))
(assert "s:split test 1" (head= '(a a a) (s:split "ababa" "b")))
; It's javascript string split after all:
(assert "s:split test 2" (head= '(a a) (s:split "ababa" "b" 2)))

(assert "s:join test 1" (= "" (s:join "," '())))
(assert "s:join test 2" (= "a" (s:join "," '(a))))
(assert "s:join test 3" (= "a,b" (s:join "," '(a b))))
(assert "s:join test 4" (= "a, b, c" (s:join ", " '(a b c))))

(def dicttest (dict 'a 2))
(assert "dict? test 1" (dict? dicttest))
(assert "dict? test 2" (not (dict? 'a)))
(assert "dict:has? test 1" (dict:has? dicttest 'a))
(assert "dict:has? test 2" (not (dict:has? dicttest 'b)))
(assert "dict:get test 1" (= 2 (dict:get dicttest 'a)))
(assert "dict:get test 2" (= 2 (dict:get dicttest 'a 3)))
(assert "dict:get test 3" (= 3 (dict:get dicttest 'b 3)))
(dict:set! dicttest 'b 4)
(assert "dict:has? test 3" (dict:has? dicttest 'b))
(assert "dict:get test 4" (= 4 (dict:get dicttest 'b)))

(assert "length test 1" (= 0 (length '())))
(assert "length test 2" (= 1 (length '(1))))
(assert "length test 3" (= 2 (length '(1 2))))
(assert "nth test" (= 2 (nth '(1 2) 1)))

(assert (++ "All " num-tests-succeeded " tests succeeded") true)
