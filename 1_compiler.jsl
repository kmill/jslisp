;;;;;;;;;;;;;;;;;;;;;;
;;; 1_compiler.jsl ;;;
;;;;;;;;;;;;;;;;;;;;;;

;; This is a basic lisp->javascript compiler.

(def eof '(eof))
(defun (eof? x) (= x eof))

(defun (stream:make source s)
  (let (i 0
        len (s:length s)
        line 1
        col 0)
    (defun (peek)
      (if (< i len)
        (s:charAt s i)
        eof))
    (defun (read)
      (if (< i len)
        (let (c (s:charAt s i))
          (switch c
            "\n" (do (set! line (+ 1 line))
                     (set! col 0))
            (do (set! col (+ 1 col))))
          (set! i (+ 1 i))
          c)
        eof))
    (fun (msg # args)
      (apply
       (switch msg
         'peek peek
         'read read
         'eof? (fun () (>= i len))
         'input (fun () s)
         'source (fun () source)
         'line (fun () line)
         'col  (fun () col)
         (error (++ "No such message: " msg)))
       args))))

(defun (stream:error s msg)
  (error (++ (s 'source) ":" (s 'line) ":" (s 'col) ": " msg)))
(defun (stream:error-expecting s exp)
  (stream:error s (++ "Expecting '" exp "'.")))

(defun (stream:try-read s char)
  (and (= char (s 'peek))
       (do (s 'read) true)))

(defun (stream:read-expect s char)
  (or (stream:try-read s char)
      (stream:error-expecting s char)))

(defun (s:contains s sub)
  (!= -1 (s:indexOf s sub)))

(defun (read:eat-comment stream)
  (if (stream 'eof?)          'pass
      (= "\n" (stream 'peek)) (read:eat-spaces stream)
      otherwise (do (stream 'read)
                    (read:eat-comment stream))))

(defun (read:eat-spaces stream)
  (if (stream 'eof?)
        'pass
      (s:contains " \t\n\r" (stream 'peek))
        (do (stream 'read)
            (read:eat-spaces stream))
      (= ";" (stream 'peek))  (read:eat-comment stream)))

(defun (read:sexp-tail stream)
  (read:eat-spaces stream)
  (if (stream 'eof?)
        (stream:error-expecting stream ")")
      (stream:try-read stream ")")
        '()
      otherwise
        (let (head (read:sexp stream))
          (read:eat-spaces stream)
          (if (stream:try-read stream "#")
            (do1 (cons head (read:sexp stream))
                 (read:eat-spaces stream)
                 (stream:read-expect stream ")"))
            (cons head (read:sexp-tail stream))))))

(defun (read:string stream)
  (if (stream 'eof?)
    (stream:error-expecting stream "\"")
    (let (c (stream 'read))
      (switch c
        "\""  ""
        "\\"  (let (esc (switch (stream 'read)
                          "\\"   "\\"
                          "\""   "\""
                          "n"    "\n"
                          "t"    "\t"
                          "r"    "\r"
                          (stream:error stream
                             "Unknown escape code.")))
                (++ esc (read:string stream)))
        (++ c (read:string stream))))))

(defun (read:token stream)
  (defun (_rt)
    (let (c (stream 'peek))
      (if (or (eof? c) (s:contains "'\"()#; \t\n\r" c))
        ""
        (do (stream 'read)
            (++ c (_rt))))))
  (let (tok (_rt))
    (if (= "" tok)
      (stream:error stream "Expecting identifier or number.")
      (let (val (js:toNum tok))
        (if (and (NaN? val) (!= "NaN" tok)) (symbol tok) val)))))

(defun (read:sexp stream)
  (read:eat-spaces stream)
  (if (stream 'eof?)
        (stream:error stream "Unexpected end of input.")
      (stream:try-read stream "(")
        (read:sexp-tail stream)
      (stream:try-read stream "'")
        (list 'quote (read:sexp stream))
      (stream:try-read stream "\"")
        (read:string stream)
      otherwise
        (read:token stream)))

(defun (read:has-another? stream)
  (read:eat-spaces stream)
  (not (stream 'eof?)))

;;; Pseudo-ADTs

(defmac defstruct (fun (_ form)
  (list 'do
    ;; a constructor
    (list 'defun form
      (append (list 'list (list 'quote (head form)))
              (tail form)))
    ;; a predicate
    (list 'defun (list (symbol (head form) "?") 'x)
      (list 'and
        '(cons? x)
        (list '= '(head x) (list 'quote (head form))))))))

;; (destruct val (s1 x y z ...) using-x-y-z ... [otherwise])
(defmac destruct (fun (_ v # bindings)
  (defun (_destruct vv bindings)
    (if (nil? bindings)
          null
        (nil? (tail bindings))
          (head bindings)
        otherwise
          (let (pat (head bindings)
                con (head (tail bindings))
                bindings2 (tail (tail bindings)))
            (let (pred (symbol (head pat) "?"))
              (list 'if (list pred vv)
                (list 'apply (list 'fun (tail pat) con)
                  (list 'tail vv))
                (_destruct vv bindings2))))))
  (let (vv (gensym))
    (list 'let (list vv v)
      (_destruct vv bindings)))))

;;; The mid-IR gives access to javascript control-flow primitives

; expressions
(defstruct (midir:js code))
(defstruct (midir:binop op expl expr))
(defstruct (midir:unop op exp))
(defstruct (midir:prop exp prop))
(defstruct (midir:lit s))
(defstruct (midir:lookup s))
(defstruct (midir:funcall f args))
(defstruct (midir:function mname args body))

; statements
(defstruct (midir:code code))
(defstruct (midir:expr expr))
(defstruct (midir:def var expr))
(defstruct (midir:if cexpr bcons balt))
(defstruct (midir:while expr body))
(defstruct (midir:return expr))
(defstruct (midir:break))
(defstruct (midir:continue))
(defstruct (midir:seq statements))

(defun (midir-expr-to-js m)
  (destruct m
    (midir:js code)
      (++ "(" code ")")
    (midir:binop op expl expr)
      (++ "(" (midir-expr-to-js expl) " " op " " (midir-expr-to-js expr) ")")
    (midir:unop op exp)
      (++ "(" op " " (midir-expr-to-js exp) ")")
    (midir:prop exp iexp)
      (++ "(" (midir-expr-to-js exp) "[" (midir-expr-to-js iexp) "])")
    (midir:lit s)
      (++ "(" (midir-lit-to-js s) ")")
    (midir:lookup s)
      s
    (midir:funcall f args)
      (++ "(" (midir-expr-to-js f) "(" (s:join ", " (map midir-expr-to-js args)) "))")
    (midir:function mname args body)
      (++ "(function "
          (if (null? mname) "" mname)
          "(" (s:join ", " args) ") {\n"
          (midir-statement-to-js body)
          "})")
    (error (++ "Unknown expr: " (repr m)))))

(defun (midir-statement-to-js m)
  (destruct m
    (midir:code code)
      (++ code ";\n")
    (midir:expr expr)
      (++ (midir-expr-to-js expr) ";\n")
    (midir:def var expr)
      (++ "var " var " = " (midir-expr-to-js expr) ";\n")
    (midir:if expr bcons balt)
      (++ "if (" (midir-expr-to-js expr) ") {\n"
          (midir-statement-to-js bcons)
          "} else {\n"
          (midir-statement-to-js balt)
          "}\n")
    (midir:while expr body)
      (++ "while (" (midir-expr-to-js expr) ") {\n"
          (midir-statement-to-js body)
          "}\n")
    (midir:return expr)
      (++ "return " (midir-expr-to-js expr) ";\n")
    (midir:break)
      "break;\n"
    (midir:continue)
      "break;\n"
    (midir:seq statements)
      (s:join "" (map midir-statement-to-js statements))
    (error (++ "Unknown statement: " (repr m)))))

(defun (midir-lit-to-js l)
  (if (nil? l)    "new Nil()"
      (cons? l)   (++ "new Cons("
                      (midir-lit-to-js (head l))
                      ", "
                      (midir-lit-to-js (tail l))
                      ")")
      (null? l)   "null"
      (symbol? l) (++ "Symbol.create(" (js-escape-string (symbol->string l))
                      (if (gensym? l) ", true" "")
                      ")")
      (number? l) (js:toString l)
      (string? l) (js-escape-string l)
      otherwise   (error (++ "Cannot compile literal: " (repr l)))))

(defun (clean-js-identifier s)
  (defun (-ci i)
    (if (< i (s:length s))
        (cons (if (or (and (<= "A" (s:charAt s i)) (<= (s:charAt s i) "Z"))
                      (and (<= "a" (s:charAt s i)) (<= (s:charAt s i) "z"))
                      (and (<= "0" (s:charAt s i)) (<= (s:charAt s i) "9")))
                (s:charAt s i)
                "_")
          (-ci (+ i 1)))
        '()))
  (apply ++ (-ci 0)))

(defun (make-js-ident-gen)
  (let (ids (dict)
        nextnum 0)
    (fun (msg # args)
      (apply
        (switch msg
          'get (fun (symb)
                 (if (dict:has? ids symb)
                     (dict:get ids symb)
                     (let (id (++ (clean-js-identifier (symbol->string symb)) "_" nextnum))
                       (set! nextnum (+ 1 nextnum))
                       (dict:set! ids symb id)
                       id)))
          'new (fun (prefix)
                 (do1 (++ prefix "_" nextnum)
                      (set! nextnum (+ 1 nextnum)))))
        args))))

;(defun (compile-to-midir exp idgen

(defun (make-global-env)
  (let (closure (ffi "(function () {
                        var globals = {};
                        return function () {
                          return eval(arguments[0]);
                        };
                      })()")
        all-code '())
    (fun (msg # args)
      (apply
        (switch msg
          'eval   (fun (code)
                    (set! all-code (cons code all-code))
                    (closure code))
          'code   (fun () (s:join "\n\n" (reversed all-code)))
          'lookup (fun (k) (dict:get (closure "globals") k))
          'has?   (fun (k) (dict:has? (closure "globals") k))
          'set!   (fun (k v) (dict:set! (closure "globals") k v))
          (error (++ "No such message: " msg)))
        args))))

(defun (make-env parent # bindings)
  (let (d (apply dict bindings))
    (fun (msg # args)
      (apply
       (switch msg
         'lookup (fun (k)
                   (if (dict:has? d k)  (dict:get d k)
                       (null? parent)   (error (++ "Environment key error: " (repr k)))
                       otherwise        (parent 'lookup k)))
         'has? (fun (k)
                 (if (dict:has? d k) true
                     (null? parent)   false
                     (parent 'has? k)))
         'set! (fun (k v) (dict:set! d k v))
         (error (++ "No such message: " msg)))
       args))))

(defstruct (MidirExpr expr))
(defstruct (MidirStatement statement expr))
(defun (midir-splice m1 m2f)
  (destruct m1
    (MidirExpr expr1)
      (m2f expr1)
    (MidirStatement statement1 expr1)
      (destruct (m2f expr1)
        (MidirExpr expr2)
          (MidirStatement statement1 expr2)
        (MidirStatement statement2 expr2)
          (MidirStatement (midir:seq (list statement1 statement2)) expr2))))
(defun (midir-close m)
  (destruct m
    (MidirExpr expr)
      (midir:expr expr)
    (MidirStatement stat expr)
      (midir:seq (list stat (midir:expr expr)))))
(defun (midir-unlist ms)
  (defun (-unlist m)
    (destruct m
      (MidirExpr expr)
        (list '() expr)
      (MidirStatement stat expr)
        (list (list stat) expr)))
  (let (ul (apply zip (map -unlist ms)))
    (if (nil? ul)
      (list '() '())
      (list (apply append (head ul)) (head (tail ul))))))
(defun (midir-set v expr)
  (MidirStatement (midir:expr (midir:binop "=" (midir:lookup v) expr)) (midir:lit null)))

(defun (compile-to-midir-toplevel exp env igen)
  (if (cons? exp)
      (switch (head exp)
        'js:def (compile-to-midir (list 'js:binop "=" (nth exp 1) (nth exp 2)) env igen)
        'js:seq (MidirStatement (midir:seq (map (fun (e)
                                                  (midir-close (compile-to-midir-toplevel e env igen)))
                                           (nth exp 1)))
                                (midir:lit null))
        (compile-to-midir exp env igen))
      (compile-to-midir exp env igen)))

(defun (compile-to-midir exp env igen)
  (defun (self-evaluating? s)
    (or (number? s) (boolean? s) (null? s) (string? s)))

  (if (self-evaluating? exp)  (MidirExpr (midir:lit exp))
      (symbol? exp)           (if (env 'has? exp)
                                  (MidirExpr (midir:lookup (env 'lookup exp)))
                                  (MidirExpr (midir:prop (midir:lookup "globals")
                                                         (midir:lit (symbol->string exp)))))
      (cons? exp)
        (compile-form-to-midir exp env igen)
      (error (++ "Unknown expression " (repr exp)))))

(defun (compile-form-to-midir exp env igen)
  (defun (comp e) (compile-to-midir e env igen))
  (switch (head exp)
    'quote      (MidirExpr (midir:lit (nth exp 1)))
    'js:def     (let (var  (igen 'get (nth exp 1)))
                  (env 'set! (nth exp 1) var)
                  (let (expr (comp (nth exp 2)))
                    (midir-splice expr
                      (fun (e) (MidirStatement (midir:def var e) (midir:lit null))))))
    'js:if      (let (cexpr (comp (nth exp 1))
                      bcons (comp (nth exp 2))
                      balt  (comp (nth exp 3))
                      outvar (igen 'new "if"))
                  (midir-splice cexpr
                    (fun (ce)
                      (MidirStatement
                        (midir:seq
                          (list
                            (midir:def outvar (midir:lit null))
                            (midir:if ce
                                      (midir-close (midir-splice bcons
                                                     (fun (be) (midir-set outvar be))))
                                      (midir-close (midir-splice balt
                                                     (fun (ae) (midir-set outvar ae)))))))
                        (midir:lookup outvar)))))
    'js:while   (let (cexpr (comp (head (tail exp)))
                      cexpr-inside (comp (head (tail exp)))
                      body  (comp (head (tail (tail exp))))
                      outvar (igen 'new "while"))
                  (midir-splice cexpr
                    (fun (ce)
                      (MidirStatement
                        (midir:seq
                          (list
                            (midir:def outvar ce)
                            (midir:while (midir:lookup outvar)
                              (midir:seq
                                (list (midir-close body)
                                      (midir-close (midir-splice cexpr-inside
                                                     (fun (ce)
                                                       (MidirExpr
                                                         (midir:binop "=" (midir:lookup outvar)
                                                                      ce))))))))))
                        (midir:lit null)))))
    'js:return  (let (expr (comp (head (tail exp))))
                  (midir-splice expr
                    (fun (e)
                      (MidirStatement (midir:return e) (midir:lit null)))))
    'js:break  (MidirStatement (midir:break) (midir:lit null))
    'js:break  (MidirStatement (midir:continue) (midir:lit null))
    'js:seq    (if (nil? (tail exp))
                   (MidirExpr (midir:lit null))
                   (let (exprs (map (. midir-close comp) (init (nth exp 1)))
                         exprsl (comp (last (nth exp 1))))
                     (midir-splice
                       (MidirStatement (midir:seq exprs) (midir:lit null))
                       (const exprsl))))

    'js:js     (MidirExpr (midir:js (head (tail exp))))
    'js:code   (MidirStatement (midir:code (head (tail exp))) (midir:lit null))
    'js:binop  (let (expl (comp (head (tail (tail exp))))
                     expr (comp (head (tail (tail (tail exp))))))
                 (midir-splice expl
                   (fun (el)
                     (midir-splice expr
                       (fun (er)
                         (MidirExpr (midir:binop (head (tail exp)) el er)))))))
    'js:unop   (let (expr (comp (head (tail (tail exp)))))
                 (midir-splice expr
                   (fun (e)
                     (MidirExpr (midir:unop (head (tail exp)) e)))))
    'js:prop   (let (expr  (comp (head (tail exp)))
                     iexpr (comp (head (tail (tail exp)))))
                 (midir-splice expr
                   (fun (e)
                     (midir-splice iexpr
                       (fun (ie)
                         (MidirExpr (midir:prop e ie)))))))
    'js:function (let* (name (nth exp 1)
                        args (map (fun (a) (igen 'get a)) (nth exp 2))
                        argse (if (null? name) (nth exp 2) (cons name (nth exp 2)))
                        body (nth exp 3)
                        env2 (apply make-env (cons env (map-append (fun (v) (list v (igen 'get v)))
                                                                   argse))))
                   
                   (MidirExpr
                     (midir:function (if (null? name) null (igen 'get name)) args
                       (midir-close
                         (midir-splice
                           (compile-to-midir body env2 igen)
                           (fun (e) (MidirStatement (midir:return e)
                                                    (midir:lit null))))))))
    
    (midir-splice (comp (head exp))
      (fun (f)
        (let (ul (midir-unlist (map comp (tail exp)))
              outvar (igen 'new "funcall"))
          (MidirStatement
            (midir:seq
              (list (midir:seq (head ul))
                    (midir:def outvar (midir:funcall f (head (tail ul))))))
            (midir:lookup outvar)))))))

(defun (macro-expand s env)
  (defun (self-evaluating? s)
    (or (number? s) (boolean? s) (null? s) (string? s)))

  (if (self-evaluating? s)  s
      (symbol? s)           s
      (cons? s)             (macro-expand-form s env)
      (error (++ "Unknown expression to macro expand " (repr s)))))

(defun (macro-expand-form s env)
  (switch (head s)
    'quote       s
    'js:def      (list 'js:def (nth s 1) (macro-expand (nth s 2) env))
    'js:if       (list 'js:if
                       (macro-expand (nth s 1) env)
                       (macro-expand (nth s 2) env)
                       (macro-expand (nth s 3) env))
    'js:while    (list 'js:while
                       (macro-expand (nth s 1) env)
                       (macro-expand (nth s 2) env))
    'js:return   (list 'js:return (macro-expand (nth s 1)))
    'js:break    s
    'js:continue s
    'js:seq      (list 'js:seq (map (fun (e) (macro-expand e env)) (nth s 1)))
    'js:js       s
    'js:binop    (list 'js:binop (nth s 1)
                       (macro-expand (nth s 2) env)
                       (macro-expand (nth s 3) env))
    'js:unop     (list 'js:unop (nth s 1) (macro-expand (nth s 2) env))
    'js:prop     (list 'js:prop
                       (macro-expand (nth s 1) env)
                       (macro-expand (nth s 2) env))
    'js:function (if (cons? (nth s 1))
                   (list 'js:function null (nth s 1) (macro-expand (nth s 2) env))
                   (list 'js:function (nth s 1) (nth s 2) (macro-expand (nth s 3) env)))

    'macrolet  (error "Don't know macrolet yet.")
    
    (if (and (env 'has? (head s))
             (macro? (env 'lookup (head s))))
        (let (expand-1 ((env 'lookup (head s)) s))
          (macro-expand expand-1 env))
        (map (fun (e) (macro-expand e env)) s))))

(def macro?
  (ffi "(function (f) { return (f && f.macro) || false; })"))

(defun (eval-in-global-env s env)
  (let* (s2 (macro-expand s env)
         midir (midir-close (compile-to-midir-toplevel s2 (make-env null) (make-js-ident-gen)))
         js (midir-statement-to-js midir))
;    (print s2)
;    (print midir)
    (print js)
    (env 'eval js)))

(defun (inner-add-macro! name f)
  (dict:set! f 'macro true)
  (global-env 'set! name f))

(def global-env (make-global-env))
(global-env 'set! 'add-macro! inner-add-macro!)

(inner-add-macro! 'def
  (fun (exp)
    (list 'js:binop "=" (nth exp 1) (nth exp 2))))
(inner-add-macro! 'fun
  (fun (exp)
    (let (args (init-improper (nth exp 1))
          varg (last-improper (nth exp 1))
          body (tail (tail exp)))
      (let (argcode (list 'js:code (js-check-num-args (length args) (not (nil? varg))))
            varargcode (list 'js:js (js-handle-vararg (length args))))
        (list 'js:function null args
              (list 'js:seq
                    (append
                       (list argcode)
                       (if (nil? varg)
                           '()
                           (list (list 'js:def varg varargcode)))
                       body)))))))
(inner-add-macro! 'named-fun
  (fun (exp)
    (let (name (nth exp 1)
          args (init-improper (nth exp 2))
          varg (last-improper (nth exp 2))
          body (tail (tail (tail exp))))
      (let (argcode (list 'js:code (js-check-num-args (length args) (not (nil? varg))))
            varargcode (list 'js:js (js-handle-vararg (length args))))
        (list 'js:function name args
              (list 'js:seq
                    (append
                       (list argcode)
                       (if (nil? varg)
                           '()
                           (list (list 'js:def varg varargcode)))
                       body)))))))

(global-env 'set! 'globals global-env)
(global-env 'set! 'head head)
(global-env 'set! 'tail tail)
(global-env 'set! 'cons cons)
(global-env 'set! 'cons? cons?)
(global-env 'set! 'nil nil)
(global-env 'set! 'nil? nil?)
(global-env 'set! 'null? null?)
(global-env 'set! 'string? string?)
(global-env 'set! 'symbol? symbol?)
(global-env 'set! 'boolean? boolean?)
(global-env 'set! 'true true)
(global-env 'set! 'false false)
(global-env 'set! 'null null)

(global-env 'set! 'list list)
(global-env 'set! 'apply apply)
(global-env 'set! 'last-improper last-improper)
(global-env 'set! 'init-improper init-improper)
(global-env 'set! 'gensym gensym)


(defun (run-test s) (eval-in-global-env s global-env))
(defun (test)
  (run-test '(add-macro! 'def (js:function null (s)
                                (list 'js:binop "=" (head (tail s)) (head (tail (tail s)))))))
  (run-test '(add-macro! 'do (js:function null (s)
                               (list 'js:seq (tail s)))))
;  (run '(add-macro! defmac (js:function (
  
)

(defun (test-load-file fn)
  (let (s (stream:make fn (load-file fn)))
    (defun (load-all)
      (when (read:has-another? s)
        (run-test (read:sexp s))
        (load-all)))
    (load-all)
    (write-file (++ fn ".js") (++ "module.exports = (function () {\nvar globals={};\n\n"
                                  (global-env 'code)
                                  "\nreturn globals;"
                                  "\n})();\n"))))


(defun (js-check-num-args min-expected has-varargs)
  (++ (if (< 0 min-expected)
          (++ "if (arguments.length < " min-expected ") {\n"
              "  throw new Error(\"Expecting at least " min-expected " arguments.\");\n"
              "}\n")
          "")
      (if has-varargs
          ""
          (++ "if (arguments.length > " min-expected ") {\n"
              "  throw new Error(\"Expecting at most " min-expected " arguments.\");\n"
              "}\n"))))

(defun (js-handle-vararg offset)
  (++ "(function (args) {\n"
      "  var vargs = new Nil();\n"
      "  for (var i = args.length - 1; i >= " offset "; i--) {\n"
      "    vargs = new Cons(args[i], vargs);\n"
      "  }\n"
      "  return vargs;\n"
      "})(arguments)"))

(defun (compile-stream s)
  (defun (load-all)
    (when (read:has-another? s)
      (eval-in-global-env (read:sexp s) global-env)
      (load-all)))
  (load-all))

(defun (compile-file fn)
  (let (s (stream:make fn (load-file fn)))
    (compile-stream s)))
(global-env 'set! 'compile-file compile-file)

(defun (compile-string str)
  (let (s (stream:make "<input>" str))
    (compile-stream s)))

(defun (write-code output-file global-env)
  (def code (++ "module.exports = (function () {\nvar globals={};\n\n"
                (global-env 'code)
                "return globals;"
                "\n})();\n"))
  (when (global-env 'has? "main")
    (set! code (++ code "if (!module.parent) module.exports.main(module.exports.list.apply(undefined, process.argv.slice(2)));\n")))
  (write-file output-file code))

(defun (main args)
  (def input-files '())
  (def output-file null)
  (def run-repl? false)
  (defun (option-parser args)
    (when (not (nil? args))
      (switch (head args)
        "-o"  (do (set! args (tail args))
                  (set! output-file (head args)))
        "-r"  (set! run-repl? true)
        (do (set! input-files (cons (head args) input-files))))
      (option-parser (tail args))))
  (option-parser args)
  (foreach fn in (reversed input-files)
    (print "Compiling " fn "\n")
    (compile-file fn))
  (when (not (null? output-file))
    (write-code output-file global-env)
    (print "Output code to " output-file "\n"))
  (when (or (nil? args) run-repl?)
    (set! repl-run-code compile-string)
    (run-repl)))
